234. Palindrome Linked List
-----------------------------

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    private ListNode reverse(ListNode slow){
    ListNode prev = null;
    ListNode current = slow;
    while (current != null){
        ListNode next = current.next;
        current.next = prev;
        prev = current;
        current = next;
    }
    return prev;
}
    public boolean isPalindrome(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }
        ListNode second_half = reverse(slow);
        ListNode fi rst_half = head;
        while (second_half != null){
            if (first_half.val != second_half.val){
                return false;
            }
            first_half = first_half.next;
            second_half = second_half.next;
        }
        return true;
    }
}
/*import java.util.ArrayList;
public class Solution{
    public boolean isPalindrome(ListNode head){
        ArrayList<Integer> list = new ArrayList<>();
        ListNode current = head;
        while (current != null){
            list.add(current.val);
            current = current.next;
        }
        int left = 0,right = list.size()-1;
        while(left < right){
            if (!list.get(left).equals(list.get(right))){
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}*/